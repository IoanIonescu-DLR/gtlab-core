/* GTlab - Gas Turbine laboratory
 * copyright 2022 by DLR
 *
 *  Author: Martin Siggel (AT-TW)
 *  Tel.: +49 2203 601 2264
 */

#include "gt_datamodel_exports.h"

#include "gt_groupproperty.h"

#include "gt_polyvector.h"
#include "gt_variant_convert.h"
#include "gt_abstractproperty.h"

/**
 * @brief This class is similar to a group property and serves
 * as a struct of properties.
 *
 * Compared to GtGroupProperty, a GtPropertyStructInstance own
 * its subproperties.
 *
 * An instance is typically created by calling to
 * GtPropertyStructDefinition::newInstance.
 */
class GtPropertyStructInstance : public GtGroupProperty
{
    Q_OBJECT

public:
    GtPropertyStructInstance(const QString& id, const QString& typeName,
                             gt::PolyVector<GtAbstractProperty>&& childProps);

    /**
     * @brief Sets value of a member of the struct
     *
     * Internally, it simply queries its subproperties and sets the value
     *
     * @param memberId The id of the member property (e.g. "x")
     * @param value    The value to be set
     * @return         Returns true, if the value could be set, false otherwise.
     */
    GT_DATAMODEL_EXPORT
    bool setMemberVal(const QString& memberId, const QVariant& value);


    /**
     * @brief Queries the value of a member variable
     *
     * @param okay[out] will be true, if the value could be queries successfully
     * @return The member value as a QVariant
     */
    GT_DATAMODEL_EXPORT
    QVariant getMemberValToVariant(const QString&, bool* okay = nullptr) const;

    /**
     * @brief Templated Version of
     *        GtPropertyStructInstance::getMemberValToVariant
     */
    template <typename T>
    T getMemberVal(const QString& memberId, bool* okay = nullptr) const
    {
        bool localokay = false;

        auto value = getMemberValToVariant(memberId, &localokay);

        if (!can_convert<T>(value))
        {
            gtError().noquote().nospace()
                << "Cannot convert member '" << memberId << "' with value '"
                << value.toString() << "' to type '" << typeid(T).name()
                << "'.";
            localokay = false;
        }

        if (okay != nullptr)
        {
            *okay = localokay;
        }

        return value.value<T>();
        ;
    }

    /**
     * @brief Return the (dynamic) type of the struct
     * @return
     */
    QString typeName() const
    {
        return objectName();
    }

private:
    gt::PolyVector<GtAbstractProperty> m_childs;
};

/**
 * @brief This class is used to dynamically define a structure of properties.
 *
 * It can then be used to generate instances of the defined type using
 * the function GtPropertyStructDefinition::newInstance
 */
class GtPropertyStructDefinition
{
public:
    /**
     * @brief GtPropertyStructDefinition
     * @param typeName Type name of the structure (similar to a class name)
     *                 e.g. MyPoint3d
     */
    GT_DATAMODEL_EXPORT
    explicit GtPropertyStructDefinition(QString typeName);


    GT_DATAMODEL_EXPORT
    QString typeName() const;

    /**
     * @brief Defines a member which will be generated by the function f
     * @param id The id of the property, e.g. "weight"
     * @param f  A function to create the member property
     */
    GT_DATAMODEL_EXPORT
    void defineMember(const QString& id, PropertyFactoryFunction f);

    /**
     * @brief Creates an instance (i.e. an actual object) given the current
     * definition.
     *
     * Since this function is similar to a factory function,
     * it transfers the ownership of the object to the caller,
     * hence a unique_ptr is returned.
     *
     * @param name The name of the object to create
     * @return
     */
    GT_DATAMODEL_EXPORT
    std::unique_ptr<GtPropertyStructInstance> newInstance(QString name) const;


private:
    struct MemberType
    {
        QString id;
        PropertyFactoryFunction makeProperty;
    };

    std::vector<MemberType> members;
    QString instanceTypeName;
};
